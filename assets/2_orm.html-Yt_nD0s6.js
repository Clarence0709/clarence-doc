import{_ as e,c as t,b as s,o as i}from"./app-CH0djAAu.js";const n={};function r(l,a){return i(),t("div",null,a[0]||(a[0]=[s('<h1 id="持久层框架" tabindex="-1"><a class="header-anchor" href="#持久层框架"><span>持久层框架</span></a></h1><h2 id="一、mybatis" tabindex="-1"><a class="header-anchor" href="#一、mybatis"><span>一、Mybatis</span></a></h2><h3 id="_1、mybatis的缓存机制" tabindex="-1"><a class="header-anchor" href="#_1、mybatis的缓存机制"><span>1、Mybatis的缓存机制</span></a></h3><h3 id="_2、mybatis分页原理" tabindex="-1"><a class="header-anchor" href="#_2、mybatis分页原理"><span>2、Mybatis分页原理</span></a></h3><h3 id="_3、mybatis工作原理" tabindex="-1"><a class="header-anchor" href="#_3、mybatis工作原理"><span>3、Mybatis工作原理</span></a></h3><h3 id="_4、mapper-接口的实现原理" tabindex="-1"><a class="header-anchor" href="#_4、mapper-接口的实现原理"><span>4、Mapper 接口的实现原理</span></a></h3><h3 id="_5、mybatis-执行器" tabindex="-1"><a class="header-anchor" href="#_5、mybatis-执行器"><span>5、MyBatis 执行器</span></a></h3><h3 id="_6、mybatis-实现自定义的-typehandler" tabindex="-1"><a class="header-anchor" href="#_6、mybatis-实现自定义的-typehandler"><span>6、MyBatis 实现自定义的 TypeHandler</span></a></h3><h3 id="_7、mybatis-拦截器和过滤器" tabindex="-1"><a class="header-anchor" href="#_7、mybatis-拦截器和过滤器"><span>7、MyBatis 拦截器和过滤器</span></a></h3><h2 id="二、mybatis-plus" tabindex="-1"><a class="header-anchor" href="#二、mybatis-plus"><span>二、Mybatis-plus</span></a></h2><p>详细配置见：<a href="https://baomidou.com/" target="_blank" rel="noopener noreferrer">Mybatis-官网</a>，此处不做赘述；</p><h2 id="三、hibernate" tabindex="-1"><a class="header-anchor" href="#三、hibernate"><span>三、Hibernate</span></a></h2><p>详细配置见：<a href="https://hibernate.org/" target="_blank" rel="noopener noreferrer">Hibernate-官网</a>，此处不做赘述；</p>',13)]))}const b=e(n,[["render",r],["__file","2_orm.html.vue"]]),m=JSON.parse('{"path":"/database/2_orm.html","title":"持久层框架","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Mybatis","slug":"一、mybatis","link":"#一、mybatis","children":[{"level":3,"title":"1、Mybatis的缓存机制","slug":"_1、mybatis的缓存机制","link":"#_1、mybatis的缓存机制","children":[]},{"level":3,"title":"2、Mybatis分页原理","slug":"_2、mybatis分页原理","link":"#_2、mybatis分页原理","children":[]},{"level":3,"title":"3、Mybatis工作原理","slug":"_3、mybatis工作原理","link":"#_3、mybatis工作原理","children":[]},{"level":3,"title":"4、Mapper 接口的实现原理","slug":"_4、mapper-接口的实现原理","link":"#_4、mapper-接口的实现原理","children":[]},{"level":3,"title":"5、MyBatis 执行器","slug":"_5、mybatis-执行器","link":"#_5、mybatis-执行器","children":[]},{"level":3,"title":"6、MyBatis 实现自定义的 TypeHandler","slug":"_6、mybatis-实现自定义的-typehandler","link":"#_6、mybatis-实现自定义的-typehandler","children":[]},{"level":3,"title":"7、MyBatis 拦截器和过滤器","slug":"_7、mybatis-拦截器和过滤器","link":"#_7、mybatis-拦截器和过滤器","children":[]}]},{"level":2,"title":"二、Mybatis-plus","slug":"二、mybatis-plus","link":"#二、mybatis-plus","children":[]},{"level":2,"title":"三、Hibernate","slug":"三、hibernate","link":"#三、hibernate","children":[]}],"git":{"updatedTime":1739624119000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"}]},"filePathRelative":"database/2_orm.md"}');export{b as comp,m as data};
