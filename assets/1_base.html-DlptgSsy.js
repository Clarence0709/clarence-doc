import{_ as u,c as o,a as e,b as n,d as s,e as l,f as p,r as i,o as r}from"./app-CnhRnMEE.js";const c="/clarence-doc/assets/TreeMap-RKRumpct.png",d={};function k(h,a){const t=i("RouteLink");return r(),o("div",null,[a[39]||(a[39]=e('<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="一、hashmap基本原理" tabindex="-1"><a class="header-anchor" href="#一、hashmap基本原理"><span>一、Hashmap基本原理</span></a></h2><p>HashMap 是一种基于哈希表的数据结构，它实现了 Map 接口，用于存储键值对 (key-value)。其基本原理如下：</p><h3 id="_1-哈希表-hash-table" tabindex="-1"><a class="header-anchor" href="#_1-哈希表-hash-table"><span>1. 哈希表（Hash Table）</span></a></h3><p>HashMap 是基于哈希表实现的，哈希表的基本思想是通过将数据的键值对映射到一个数组的索引位置上来提高数据查找的效率。具体流程如下：</p>',5)),n("ul",null,[a[3]||(a[3]=n("li",null,[n("p",null,"哈希函数： HashMap 使用哈希函数将键（key）映射到数组的索引位置。哈希函数的目的是通过计算一个值，将不同的键映射到哈希表中的位置。")],-1)),n("li",null,[n("p",null,[a[1]||(a[1]=s("数组： 哈希表内部使用一个数组来存储数据。数组中的每个元素存储一个链表（或者在 Java 8 后是 ")),l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[0]||(a[0]=[s("红黑树")])),_:1}),a[2]||(a[2]=s("），用于处理哈希冲突。"))])])]),a[40]||(a[40]=n("h3",{id:"_2-哈希冲突",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-哈希冲突"},[n("span",null,"2. 哈希冲突")])],-1)),a[41]||(a[41]=n("p",null,"由于哈希函数不可能做到完全唯一的映射，不同的键可能会被映射到相同的索引，这种情况称为哈希冲突。HashMap 通过以下方式解决哈希冲突：",-1)),n("ul",null,[n("li",null,[n("p",null,[a[5]||(a[5]=s("链表法（链式哈希）： 在发生冲突的情况下，HashMap 会将冲突的键值对存储到一个链表中（或者 ")),l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[4]||(a[4]=[s("红黑树")])),_:1}),a[6]||(a[6]=s("）。当多个元素映射到同一个索引位置时，它们会形成一个链表。"))])]),n("li",null,[l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[7]||(a[7]=[s("红黑树")])),_:1}),a[9]||(a[9]=s("法：在 Java 8 及以后的版本中，如果链表的长度超过一定阈值（默认为 8），HashMap 会将链表转化为 ")),l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[8]||(a[8]=[s("红黑树")])),_:1}),a[10]||(a[10]=s("，以提高查询效率。"))])]),a[42]||(a[42]=e('<h3 id="_3-扩容机制" tabindex="-1"><a class="header-anchor" href="#_3-扩容机制"><span>3. 扩容机制</span></a></h3><p>当 HashMap 中的元素过多时，哈希表的负载因子（load factor）可能会达到阈值，导致哈希表的存储效率降低。默认情况下，负载因子为 0.75。<strong>当元素个数超过当前容量 * 负载因子时，HashMap 会进行扩容</strong>（通常是原数组大小的 2 倍）。</p><p>扩容过程中，所有元素的哈希值会被重新计算，并重新放置到新的数组位置。这是因为<strong>哈希表的大小发生变化，导致原先的索引位置不再适用</strong>。</p><h3 id="_4-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_4-时间复杂度"><span>4. 时间复杂度</span></a></h3><ul><li>查找、插入、删除操作的时间复杂度：</li></ul>',5)),n("p",null,[a[12]||(a[12]=s("在理想情况下，哈希表的查找、插入和删除操作的时间复杂度为 O(1)。但是，如果发生哈希冲突，性能会退化到 O(n)（链表长度为 n 时）。使用 ")),l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[11]||(a[11]=[s("红黑树")])),_:1}),a[13]||(a[13]=s("优化后，最坏情况下时间复杂度为 O(log n)。"))]),a[43]||(a[43]=e('<ul><li>扩容操作的时间复杂度：</li></ul><p>扩容是一个相对耗时的操作，时间复杂度为 O(n)，但扩容操作是按需进行的，不是频繁发生，因此平均而言，HashMap 的操作仍然是 O(1)。</p><h3 id="_5-关键特点" tabindex="-1"><a class="header-anchor" href="#_5-关键特点"><span>5. 关键特点</span></a></h3><ul><li>非线程安全：HashMap 不是线程安全的，如果在多线程环境下使用，需要考虑同步问题。</li><li>允许 null 键和 null 值：HashMap 允许一个 null 键和多个 null 值。</li><li>元素顺序不保证：HashMap 不保证键值对的顺序，因为它是基于哈希函数计算索引的，顺序是无序的。如果需要顺序，可以使用 LinkedHashMap</li></ul><h2 id="二、treemap分析" tabindex="-1"><a class="header-anchor" href="#二、treemap分析"><span>二、TreeMap分析</span></a></h2><h3 id="_1、源码分析" tabindex="-1"><a class="header-anchor" href="#_1、源码分析"><span>1、源码分析</span></a></h3><ul><li>TreeMap 的核心特点</li></ul>',7)),n("table",null,[a[22]||(a[22]=n("thead",null,[n("tr",null,[n("th",null,"特性"),n("th",null,"说明")])],-1)),n("tbody",null,[n("tr",null,[a[16]||(a[16]=n("td",null,"底层实现",-1)),n("td",null,[l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[14]||(a[14]=[s("红黑树")])),_:1}),a[15]||(a[15]=s("（Red-Black Tree），是一种自平衡二叉搜索树（BST）"))])]),a[17]||(a[17]=n("tr",null,[n("td",null,"排序方式"),n("td",null,"默认按 key 的 自然顺序（Comparable） 排序，也可以传入 自定义 Comparator")],-1)),a[18]||(a[18]=n("tr",null,[n("td",null,"时间复杂度"),n("td",null,"O(log n)（增、删、查）")],-1)),a[19]||(a[19]=n("tr",null,[n("td",null,"是否允许 null key"),n("td",null,"❌ 不允许 null key（会抛 NullPointerException）")],-1)),a[20]||(a[20]=n("tr",null,[n("td",null,"是否允许 null value"),n("td",null,"✅ 允许 null value")],-1)),a[21]||(a[21]=n("tr",null,[n("td",null,"是否线程安全"),n("td",null,"❌ 非线程安全（需要 Collections.synchronizedMap() 保护）")],-1))])]),a[44]||(a[44]=e('<ul><li>类关联图如下所示：</li></ul><p><img src="'+c+`" alt="image.png"></p><div class="hint-container important"><p class="hint-container-title">使用途径</p><p>适用于需要 &quot;<strong>自动排序</strong>&quot; 和 &quot;<strong>范围查询</strong>&quot; 的场景。</p></div><p>1、适用场景：数据存储时要求按照 key 进行排序，方便后续查询和展示</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> productMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">productMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">productMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">&quot;Samsung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">productMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">&quot;Huawei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 遍历时 key 是按顺序排序的（101, 102, 103）</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> productMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、需要 &quot;范围查询&quot; 或 &quot;区间搜索&quot;</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transactionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">transactionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1707052800000L</span><span class="token punctuation">,</span> <span class="token string">&quot;订单 A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2024-02-05 00:00:00</span></span>
<span class="line">transactionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1707139200000L</span><span class="token punctuation">,</span> <span class="token string">&quot;订单 B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2024-02-06 00:00:00</span></span>
<span class="line">transactionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1707225600000L</span><span class="token punctuation">,</span> <span class="token string">&quot;订单 C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2024-02-07 00:00:00</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取 2 月 5 日到 2 月 6 日之间的交易</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> transactionMap<span class="token punctuation">.</span><span class="token function">subMap</span><span class="token punctuation">(</span><span class="token number">1707052800000L</span><span class="token punctuation">,</span> <span class="token number">1707139200000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、相关类对比" tabindex="-1"><a class="header-anchor" href="#_2、相关类对比"><span>2、相关类对比</span></a></h3>`,8)),n("table",null,[a[38]||(a[38]=n("thead",null,[n("tr",null,[n("th",null,"对比项"),n("th",null,"TreeMap"),n("th",null,"HashMap"),n("th",null,"LinkedHashMap"),n("th",null,"ConcurrentSkipListMap")])],-1)),n("tbody",null,[n("tr",null,[a[28]||(a[28]=n("td",null,[n("strong",null,"底层数据结构")],-1)),n("td",null,[l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[23]||(a[23]=[s("红黑树")])),_:1}),a[24]||(a[24]=s("（Red-Black Tree）"))]),n("td",null,[a[26]||(a[26]=s("哈希表（数组 + 链表/ ")),l(t,{to:"/algorithm/0_base#红黑树-balanced-binary-search-tree-bbst"},{default:p(()=>a[25]||(a[25]=[s("红黑树")])),_:1}),a[27]||(a[27]=s("）"))]),a[29]||(a[29]=n("td",null,"哈希表 + 双向链表",-1)),a[30]||(a[30]=n("td",null,"跳表（Skip List）",-1))]),a[31]||(a[31]=n("tr",null,[n("td",null,[n("strong",null,"key 是否有序")]),n("td",null,"✅ 有序（按 key 排序）"),n("td",null,"❌ 无序"),n("td",null,"✅ 按插入顺序排序"),n("td",null,"✅ 有序（按 key 排序）")],-1)),a[32]||(a[32]=n("tr",null,[n("td",null,[n("strong",null,"时间复杂度")]),n("td",null,"O(log n)"),n("td",null,"O(1) 平均，O(n) 最坏"),n("td",null,"O(1) 平均，O(n) 最坏"),n("td",null,"O(log n)")],-1)),a[33]||(a[33]=n("tr",null,[n("td",null,[n("strong",null,"是否允许 null key")]),n("td",null,"❌ 不允许"),n("td",null,"✅ 允许"),n("td",null,"✅ 允许"),n("td",null,"❌ 不允许")],-1)),a[34]||(a[34]=n("tr",null,[n("td",null,[n("strong",null,"是否允许 null value")]),n("td",null,"✅ 允许"),n("td",null,"✅ 允许"),n("td",null,"✅ 允许"),n("td",null,"✅ 允许")],-1)),a[35]||(a[35]=n("tr",null,[n("td",null,[n("strong",null,"线程安全")]),n("td",null,"❌ 非线程安全"),n("td",null,"❌ 非线程安全"),n("td",null,"❌ 非线程安全"),n("td",null,"✅ 线程安全")],-1)),a[36]||(a[36]=n("tr",null,[n("td",null,[n("strong",null,"适用场景")]),n("td",null,"需要排序、范围查询、导航结构"),n("td",null,"快速查找、无序存储、大量数据"),n("td",null,"需要按插入顺序遍历的场景"),n("td",null,"并发环境下的有序映射")],-1)),a[37]||(a[37]=n("tr",null,[n("td",null,[n("strong",null,"主要应用")]),n("td",null,"排名、日志存储、区间查找"),n("td",null,"缓存、映射查找、对象存储"),n("td",null,"LRU 缓存、访问顺序存储"),n("td",null,"线程安全的排序映射结构")],-1))])]),a[45]||(a[45]=e('<h2 id="三、hashmap和hashtable的区别" tabindex="-1"><a class="header-anchor" href="#三、hashmap和hashtable的区别"><span>三、HashMap和HashTable的区别</span></a></h2><h2 id="四、hashmap和concurrenthashmap的区别" tabindex="-1"><a class="header-anchor" href="#四、hashmap和concurrenthashmap的区别"><span>四、HashMap和ConcurrentHashMap的区别</span></a></h2><h3 id="_1、两者区别" tabindex="-1"><a class="header-anchor" href="#_1、两者区别"><span>1、两者区别</span></a></h3><h3 id="_2、currenthashmap为何放弃分段锁" tabindex="-1"><a class="header-anchor" href="#_2、currenthashmap为何放弃分段锁"><span>2、CurrentHashMap为何放弃分段锁？</span></a></h3><h2 id="五、threadlocal" tabindex="-1"><a class="header-anchor" href="#五、threadlocal"><span>五、ThreadLocal</span></a></h2><h3 id="_1、原理及其应用" tabindex="-1"><a class="header-anchor" href="#_1、原理及其应用"><span>1、原理及其应用</span></a></h3><h3 id="_2、transmittable-threadlocal" tabindex="-1"><a class="header-anchor" href="#_2、transmittable-threadlocal"><span>2、Transmittable ThreadLocal</span></a></h3>',7))])}const b=u(d,[["render",k],["__file","1_base.html.vue"]]),g=JSON.parse('{"path":"/java/1_base.html","title":"Java基础","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Hashmap基本原理","slug":"一、hashmap基本原理","link":"#一、hashmap基本原理","children":[{"level":3,"title":"1. 哈希表（Hash Table）","slug":"_1-哈希表-hash-table","link":"#_1-哈希表-hash-table","children":[]},{"level":3,"title":"2. 哈希冲突","slug":"_2-哈希冲突","link":"#_2-哈希冲突","children":[]},{"level":3,"title":"3. 扩容机制","slug":"_3-扩容机制","link":"#_3-扩容机制","children":[]},{"level":3,"title":"4. 时间复杂度","slug":"_4-时间复杂度","link":"#_4-时间复杂度","children":[]},{"level":3,"title":"5. 关键特点","slug":"_5-关键特点","link":"#_5-关键特点","children":[]}]},{"level":2,"title":"二、TreeMap分析","slug":"二、treemap分析","link":"#二、treemap分析","children":[{"level":3,"title":"1、源码分析","slug":"_1、源码分析","link":"#_1、源码分析","children":[]},{"level":3,"title":"2、相关类对比","slug":"_2、相关类对比","link":"#_2、相关类对比","children":[]}]},{"level":2,"title":"三、HashMap和HashTable的区别","slug":"三、hashmap和hashtable的区别","link":"#三、hashmap和hashtable的区别","children":[]},{"level":2,"title":"四、HashMap和ConcurrentHashMap的区别","slug":"四、hashmap和concurrenthashmap的区别","link":"#四、hashmap和concurrenthashmap的区别","children":[{"level":3,"title":"1、两者区别","slug":"_1、两者区别","link":"#_1、两者区别","children":[]},{"level":3,"title":"2、CurrentHashMap为何放弃分段锁？","slug":"_2、currenthashmap为何放弃分段锁","link":"#_2、currenthashmap为何放弃分段锁","children":[]}]},{"level":2,"title":"五、ThreadLocal","slug":"五、threadlocal","link":"#五、threadlocal","children":[{"level":3,"title":"1、原理及其应用","slug":"_1、原理及其应用","link":"#_1、原理及其应用","children":[]},{"level":3,"title":"2、Transmittable ThreadLocal","slug":"_2、transmittable-threadlocal","link":"#_2、transmittable-threadlocal","children":[]}]}],"git":{"updatedTime":1738750279000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":3,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"}]},"filePathRelative":"java/1_base.md"}');export{b as comp,g as data};
