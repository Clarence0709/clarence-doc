import{_ as n,c as s,b as e,a as t,f as a,d as h,e as r,r as d,o as p}from"./app-6TT6Inon.js";const c={};function o(m,l){const i=d("RouteLink");return p(),s("div",null,[l[2]||(l[2]=e('<h1 id="java总结-数据库" tabindex="-1"><a class="header-anchor" href="#java总结-数据库"><span>Java总结-数据库</span></a></h1><h2 id="一、数据库的隔离级别" tabindex="-1"><a class="header-anchor" href="#一、数据库的隔离级别"><span>一、数据库的隔离级别？</span></a></h2><h3 id="_1、-uncommitted-读未提交" tabindex="-1"><a class="header-anchor" href="#_1、-uncommitted-读未提交"><span>1、 Uncommitted（读未提交）</span></a></h3><ul><li>事务可以读取其他事务未提交的数据（脏读）。</li><li>可能会出现<strong>脏读（Dirty Read）、不可重复读（Non-repeatable Read）和幻读（Phantom Read）</strong>。</li><li>并发性能高，但数据一致性差。</li></ul><h3 id="_2、read-committed-读已提交" tabindex="-1"><a class="header-anchor" href="#_2、read-committed-读已提交"><span>2、Read Committed（读已提交）</span></a></h3><ul><li>事务只能读取已经提交的数据。</li><li><strong>避免脏读</strong>，但仍然可能出现<strong>不可重复读和幻读</strong>。</li><li>提高数据一致性，但可能影响性能。</li></ul><h3 id="_3、repeatable-read-可重复读" tabindex="-1"><a class="header-anchor" href="#_3、repeatable-read-可重复读"><span>3、Repeatable Read（可重复读）</span></a></h3><ul><li>事务在执行期间，多次读取相同的数据时，保证读取结果一致。</li><li>避免脏读和不可重复读，但可能仍然会有幻读。</li><li>MySQL InnoDB 通过 <strong>MVCC + Gap Lock</strong> 解决幻读问题。</li></ul><h3 id="_4、serializable-可串行化" tabindex="-1"><a class="header-anchor" href="#_4、serializable-可串行化"><span>4、Serializable（可串行化）</span></a></h3><ul><li>最高隔离级别，相当于事务<strong>串行执行</strong>，避免所有并发问题（脏读、不可重复读、幻读）。</li><li><strong>通过行级锁或表级锁实现</strong>，并发性能最差，适用于高数据一致性要求的场景。</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>SQL Server、Oracle 默认的隔离级别：Repeatable Read（可重读）级别。<br> Oracle 默认的隔离级别：Read Committed（读取已提交的）级别。</p></div><h3 id="_1、脏读和幻读的区别" tabindex="-1"><a class="header-anchor" href="#_1、脏读和幻读的区别"><span>1、脏读和幻读的区别</span></a></h3><h2 id="二、讲一讲mysql的索引" tabindex="-1"><a class="header-anchor" href="#二、讲一讲mysql的索引"><span>二、讲一讲MySql的索引？</span></a></h2><h3 id="_1、索引的原理" tabindex="-1"><a class="header-anchor" href="#_1、索引的原理"><span>1、索引的原理</span></a></h3><h3 id="_2、索引的类型" tabindex="-1"><a class="header-anchor" href="#_2、索引的类型"><span>2、索引的类型</span></a></h3><h3 id="_3、如何创建合理的索引" tabindex="-1"><a class="header-anchor" href="#_3、如何创建合理的索引"><span>3、如何创建合理的索引？</span></a></h3><h3 id="_4、索引如何优化" tabindex="-1"><a class="header-anchor" href="#_4、索引如何优化"><span>4、索引如何优化？</span></a></h3><h2 id="三、聚集索引和非聚集索引的区别" tabindex="-1"><a class="header-anchor" href="#三、聚集索引和非聚集索引的区别"><span>三、聚集索引和非聚集索引的区别？</span></a></h2><h3 id="_1、聚集索引" tabindex="-1"><a class="header-anchor" href="#_1、聚集索引"><span>1、聚集索引</span></a></h3><h3 id="_2、非聚集索引" tabindex="-1"><a class="header-anchor" href="#_2、非聚集索引"><span>2、非聚集索引</span></a></h3><h3 id="_3、回表了解吗" tabindex="-1"><a class="header-anchor" href="#_3、回表了解吗"><span>3、回表了解吗？</span></a></h3><h2 id="四、索引失效的场景有哪些" tabindex="-1"><a class="header-anchor" href="#四、索引失效的场景有哪些"><span>四、索引失效的场景有哪些？</span></a></h2><ul><li><p>联合索引不满足最左匹配原则</p></li><li><p>错误的like查询使用</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>此种情况其实就是<strong>最左匹配原则</strong>，如下情况：<br></p><p>模糊查询时（like语句），模糊匹配的占位符位于条件的首部。</p></div><ul><li><p>索引列 参与运算 或 使用函数</p></li><li><p>类型隐式转换</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>参数类型与字段类型不匹配，导致类型发生了隐式转换，索引失效。</p></div><ul><li>使用OR操作</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><ul><li><p>查询条件使用or关键字，其中一个字段没有创建索引，则会导致整个查询语句索引失效；</p></li><li><p>or两边为“&gt;”和“&lt;”范围查询时，索引失效。</p></li></ul></div><ul><li><p>两列做比较（等于和不等于比较）</p></li><li><p>查询条件为：is not null、not in和not exists</p></li><li><p>order by导致索引失效</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>当查询条件涉及到order by、limit等条件时，是否走索引情况比较复杂，而且与Mysql版本有关:</p><ul><li><p>通常普通索引，如果未使用limit，则不会走索引。</p></li><li><p>order by多个索引字段时，可能不会走索引。</p></li><li><p>其他情况，建议在使用时进行explain验证。</p></li></ul></div><ul><li>参数不同导致索引失效</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>当查询条件为大于等于、in等范围查询时，根据查询结果占全表数据比例的不同，优化器有可能会放弃索引，进行全表扫描。</p></div><ul><li>Mysql优化器的其他优化策略</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>比如优化器认为在某些情况下，全表扫描比走索引快，则它就会放弃索引</p></div><h2 id="五、mysql的存储引擎对比" tabindex="-1"><a class="header-anchor" href="#五、mysql的存储引擎对比"><span>五、Mysql的存储引擎对比</span></a></h2><h3 id="_1、myisam" tabindex="-1"><a class="header-anchor" href="#_1、myisam"><span>1、MyISAM</span></a></h3><p>（1）不支持事务，但是每次查询都是原子的；</p><p>（2）支持表级锁，即每次操作是对整个表加锁；</p><p>（3）存储表的总行数；</p><p>（4）一个 MYISAM 表有三个文件：索引文件、表结构文件、数据文件；</p><p>（5）采用菲聚集索引，索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致，但是辅索引不用保证唯一性。</p><h3 id="_2、innodb" tabindex="-1"><a class="header-anchor" href="#_2、innodb"><span>2、InnoDb</span></a></h3><p>（1）支持 ACID 的事务，支持事务的四种隔离级别；</p><p>（2）支持行级锁及外键约束：因此可以支持写并发；</p><p>（3）不存储总行数：</p><p>（4）一个 InnoDb 引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个 （设置为独立表空，表大小受操作系统文件大小限制，一般为 2G），受操作系统文件大小的限制；</p><p>（5）主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅 索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持 B+树结构，文件的大调整。</p><h2 id="六、explain关键字的介绍" tabindex="-1"><a class="header-anchor" href="#六、explain关键字的介绍"><span>六、Explain关键字的介绍？</span></a></h2><h2 id="七、mysql的几种锁对比" tabindex="-1"><a class="header-anchor" href="#七、mysql的几种锁对比"><span>七、Mysql的几种锁对比？</span></a></h2>',49)),t("p",null,[l[1]||(l[1]=a("更多详情请查看 ")),h(i,{to:"/database/1_mysql.md"},{default:r(()=>l[0]||(l[0]=[a("Mysql锁")])),_:1})]),l[3]||(l[3]=e('<h3 id="_1、共享锁-s锁" tabindex="-1"><a class="header-anchor" href="#_1、共享锁-s锁"><span>1、共享锁（S锁）</span></a></h3><h3 id="_2、排他锁-x锁" tabindex="-1"><a class="header-anchor" href="#_2、排他锁-x锁"><span>2、排他锁（X锁）</span></a></h3><h2 id="八、mysql的几种锁对比" tabindex="-1"><a class="header-anchor" href="#八、mysql的几种锁对比"><span>八、Mysql的几种锁对比？</span></a></h2><h2 id="九、说一下mvcc" tabindex="-1"><a class="header-anchor" href="#九、说一下mvcc"><span>九、说一下MVCC？</span></a></h2><h3 id="_1、mvcc原理" tabindex="-1"><a class="header-anchor" href="#_1、mvcc原理"><span>1、MVCC原理</span></a></h3><h3 id="_2、mysql是如何解决幻读的" tabindex="-1"><a class="header-anchor" href="#_2、mysql是如何解决幻读的"><span>2、Mysql是如何解决幻读的？</span></a></h3><h2 id="十、mysql的几种日志" tabindex="-1"><a class="header-anchor" href="#十、mysql的几种日志"><span>十、Mysql的几种日志？</span></a></h2><h2 id="十一、mysql集群分类" tabindex="-1"><a class="header-anchor" href="#十一、mysql集群分类"><span>十一、Mysql集群分类？</span></a></h2><h2 id="十二、mysql的主从同步原理" tabindex="-1"><a class="header-anchor" href="#十二、mysql的主从同步原理"><span>十二、Mysql的主从同步原理？</span></a></h2><h3 id="_1、mysql-5-7之前" tabindex="-1"><a class="header-anchor" href="#_1、mysql-5-7之前"><span>1、Mysql 5.7之前：</span></a></h3><h3 id="_2、mysql-5-7之后" tabindex="-1"><a class="header-anchor" href="#_2、mysql-5-7之后"><span>2、Mysql 5.7之后：</span></a></h3><h2 id="十三、mysql的执行流程" tabindex="-1"><a class="header-anchor" href="#十三、mysql的执行流程"><span>十三、Mysql的执行流程？</span></a></h2><h2 id="十四、高并发下-如何做到安全的修改同一行数据" tabindex="-1"><a class="header-anchor" href="#十四、高并发下-如何做到安全的修改同一行数据"><span>十四、高并发下，如何做到安全的修改同一行数据</span></a></h2><h2 id="十五、几个常见的影响mysql性能的案例" tabindex="-1"><a class="header-anchor" href="#十五、几个常见的影响mysql性能的案例"><span>十五、几个常见的影响MYSQL性能的案例？</span></a></h2>',14))])}const y=n(c,[["render",o],["__file","1_db.html.vue"]]),u=JSON.parse('{"path":"/interview/1_db.html","title":"Java总结-数据库","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、数据库的隔离级别？","slug":"一、数据库的隔离级别","link":"#一、数据库的隔离级别","children":[{"level":3,"title":"1、 Uncommitted（读未提交）","slug":"_1、-uncommitted-读未提交","link":"#_1、-uncommitted-读未提交","children":[]},{"level":3,"title":"2、Read Committed（读已提交）","slug":"_2、read-committed-读已提交","link":"#_2、read-committed-读已提交","children":[]},{"level":3,"title":"3、Repeatable Read（可重复读）","slug":"_3、repeatable-read-可重复读","link":"#_3、repeatable-read-可重复读","children":[]},{"level":3,"title":"4、Serializable（可串行化）","slug":"_4、serializable-可串行化","link":"#_4、serializable-可串行化","children":[]},{"level":3,"title":"1、脏读和幻读的区别","slug":"_1、脏读和幻读的区别","link":"#_1、脏读和幻读的区别","children":[]}]},{"level":2,"title":"二、讲一讲MySql的索引？","slug":"二、讲一讲mysql的索引","link":"#二、讲一讲mysql的索引","children":[{"level":3,"title":"1、索引的原理","slug":"_1、索引的原理","link":"#_1、索引的原理","children":[]},{"level":3,"title":"2、索引的类型","slug":"_2、索引的类型","link":"#_2、索引的类型","children":[]},{"level":3,"title":"3、如何创建合理的索引？","slug":"_3、如何创建合理的索引","link":"#_3、如何创建合理的索引","children":[]},{"level":3,"title":"4、索引如何优化？","slug":"_4、索引如何优化","link":"#_4、索引如何优化","children":[]}]},{"level":2,"title":"三、聚集索引和非聚集索引的区别？","slug":"三、聚集索引和非聚集索引的区别","link":"#三、聚集索引和非聚集索引的区别","children":[{"level":3,"title":"1、聚集索引","slug":"_1、聚集索引","link":"#_1、聚集索引","children":[]},{"level":3,"title":"2、非聚集索引","slug":"_2、非聚集索引","link":"#_2、非聚集索引","children":[]},{"level":3,"title":"3、回表了解吗？","slug":"_3、回表了解吗","link":"#_3、回表了解吗","children":[]}]},{"level":2,"title":"四、索引失效的场景有哪些？","slug":"四、索引失效的场景有哪些","link":"#四、索引失效的场景有哪些","children":[]},{"level":2,"title":"五、Mysql的存储引擎对比","slug":"五、mysql的存储引擎对比","link":"#五、mysql的存储引擎对比","children":[{"level":3,"title":"1、MyISAM","slug":"_1、myisam","link":"#_1、myisam","children":[]},{"level":3,"title":"2、InnoDb","slug":"_2、innodb","link":"#_2、innodb","children":[]}]},{"level":2,"title":"六、Explain关键字的介绍？","slug":"六、explain关键字的介绍","link":"#六、explain关键字的介绍","children":[]},{"level":2,"title":"七、Mysql的几种锁对比？","slug":"七、mysql的几种锁对比","link":"#七、mysql的几种锁对比","children":[{"level":3,"title":"1、共享锁（S锁）","slug":"_1、共享锁-s锁","link":"#_1、共享锁-s锁","children":[]},{"level":3,"title":"2、排他锁（X锁）","slug":"_2、排他锁-x锁","link":"#_2、排他锁-x锁","children":[]}]},{"level":2,"title":"八、Mysql的几种锁对比？","slug":"八、mysql的几种锁对比","link":"#八、mysql的几种锁对比","children":[]},{"level":2,"title":"九、说一下MVCC？","slug":"九、说一下mvcc","link":"#九、说一下mvcc","children":[{"level":3,"title":"1、MVCC原理","slug":"_1、mvcc原理","link":"#_1、mvcc原理","children":[]},{"level":3,"title":"2、Mysql是如何解决幻读的？","slug":"_2、mysql是如何解决幻读的","link":"#_2、mysql是如何解决幻读的","children":[]}]},{"level":2,"title":"十、Mysql的几种日志？","slug":"十、mysql的几种日志","link":"#十、mysql的几种日志","children":[]},{"level":2,"title":"十一、Mysql集群分类？","slug":"十一、mysql集群分类","link":"#十一、mysql集群分类","children":[]},{"level":2,"title":"十二、Mysql的主从同步原理？","slug":"十二、mysql的主从同步原理","link":"#十二、mysql的主从同步原理","children":[{"level":3,"title":"1、Mysql 5.7之前：","slug":"_1、mysql-5-7之前","link":"#_1、mysql-5-7之前","children":[]},{"level":3,"title":"2、Mysql 5.7之后：","slug":"_2、mysql-5-7之后","link":"#_2、mysql-5-7之后","children":[]}]},{"level":2,"title":"十三、Mysql的执行流程？","slug":"十三、mysql的执行流程","link":"#十三、mysql的执行流程","children":[]},{"level":2,"title":"十四、高并发下，如何做到安全的修改同一行数据","slug":"十四、高并发下-如何做到安全的修改同一行数据","link":"#十四、高并发下-如何做到安全的修改同一行数据","children":[]},{"level":2,"title":"十五、几个常见的影响MYSQL性能的案例？","slug":"十五、几个常见的影响mysql性能的案例","link":"#十五、几个常见的影响mysql性能的案例","children":[]}],"git":{"updatedTime":1739198420000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":6,"url":"https://github.com/hanchen"}]},"filePathRelative":"interview/1_db.md"}');export{y as comp,u as data};
