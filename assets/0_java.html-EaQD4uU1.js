import{_ as p,c,a as s,b as e,d as a,e as l,f as i,r as o,o as d}from"./app-DsiQjXxY.js";const r={};function u(k,n){const t=o("RouteLink");return d(),c("div",null,[n[4]||(n[4]=s(`<h1 id="java总结-java" tabindex="-1"><a class="header-anchor" href="#java总结-java"><span>Java总结-Java</span></a></h1><h2 id="一、java中的几种基本数据类型" tabindex="-1"><a class="header-anchor" href="#一、java中的几种基本数据类型"><span>一、JAVA中的几种基本数据类型</span></a></h2><p>Java语言中一共提供了8种原始的数据类型（byte，short，int，long，float，double，char，boolean），这些数据类型不是对象， 而是Java语言中不同于类的特殊类型，这些基本类型的数据变量在声明之后就会立刻在栈上被分配内存空间。</p><p>除了这8种基本的数据类型外， 其他类型都是引用类型（例如类、接口、数组等），引用类型类似于C++中的引用或指针的概念，它以特殊的方式指向对象实体， 此类变量在声明时不会被分配内存空间，只是存储了一个内存地址而已。</p><table><thead><tr><th>数据类型</th><th>字节长度</th><th>范围</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>int</td><td>4</td><td>(-2^31~2^31-1)</td><td>0</td><td>Integer</td></tr><tr><td>short</td><td>2</td><td>[-32768,32767]</td><td>0</td><td>Short</td></tr><tr><td>byte</td><td>1</td><td>[-128,127]</td><td>0</td><td>Byte</td></tr><tr><td>long</td><td>8</td><td>(-2^63~2^63-1)</td><td>0L或0l</td><td>Long</td></tr><tr><td>double</td><td>8</td><td>64位IEEE754双精度范围</td><td>0.0</td><td>Double</td></tr><tr><td>float</td><td>4</td><td>32位IEEE754单精度范围</td><td>0.0F或0.0f</td><td>Float</td></tr><tr><td>char</td><td>2</td><td>Unicode [0,65535]</td><td>u0000</td><td>Character</td></tr><tr><td>boolean</td><td>1</td><td>true和false</td><td>flase</td><td>Boolean</td></tr></tbody></table><h2 id="二、string-类能被继承吗" tabindex="-1"><a class="header-anchor" href="#二、string-类能被继承吗"><span>二、String 类能被继承吗</span></a></h2><p>不可以，因为 String类有 final修饰符，而 final修饰的类是不能被继承的，实现细节也不允许改变。</p><h2 id="三、讲讲类的实例化顺序" tabindex="-1"><a class="header-anchor" href="#三、讲讲类的实例化顺序"><span>三、讲讲类的实例化顺序</span></a></h2><p>当 Java 虚拟机（JVM）遇到一个类的引用时，它会按照 “<strong>加载 -&gt; 连接 -&gt; 初始化</strong>” 这三个步骤来加载类：</p><h3 id="_1、加载-loading" tabindex="-1"><a class="header-anchor" href="#_1、加载-loading"><span>1、加载（Loading）</span></a></h3><ul><li>通过类加载器（ClassLoader）找到 .class 文件，并加载进内存。</li><li>生成 java.lang.Class 对象（即类的元数据）。</li></ul><h3 id="_2、连接-linking" tabindex="-1"><a class="header-anchor" href="#_2、连接-linking"><span>2、连接（Linking）</span></a></h3><p>连接又包括以下 3 个子阶段：</p><ul><li>验证（Verify）：确保类的字节码符合 JVM 规范（如格式检查、安全检查）。</li><li>准备（Prepare）：为静态变量分配内存，并初始化默认值（不会执行赋值语句）。</li><li>解析（Resolve）：解析符号引用，将其替换为直接引用。</li></ul><h3 id="_3、初始化-initialization" tabindex="-1"><a class="header-anchor" href="#_3、初始化-initialization"><span>3、初始化（Initialization）</span></a></h3><ul><li><p>执行类的 静态变量 和 静态代码块，按它们在代码中的顺序执行。</p></li><li><p>只有在类真正被使用时才会触发初始化，例如：</p><ul><li>创建类的实例时 new 类()</li><li>调用类的静态方法或访问静态变量</li><li>反射调用 Class.forName(&quot;类名&quot;)</li><li>作为父类时，子类初始化会触发父类的初始化</li></ul></li></ul><div class="hint-container important"><p class="hint-container-title">执行顺序</p><p>父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量（父类实例成员变量）、父类构造函数、子类非静态变量（子类实例成员变量）、子类构造函数。</p></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> staticVar <span class="token operator">=</span> <span class="token function">initStaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 静态变量</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1. 父类的静态代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span> instanceVar <span class="token operator">=</span> <span class="token function">initInstanceVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 实例变量</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3. 父类的实例代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4. 父类的构造方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">initStaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0. 父类的静态变量初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;staticVar&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">initInstanceVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2. 父类的实例变量初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;instanceVar&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5. 子类的静态代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;7. 子类的实例代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;8. 子类的构造方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoadOrder</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建子类对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说-synchronized-和-reentrantlock" tabindex="-1"><a class="header-anchor" href="#说说-synchronized-和-reentrantlock"><span>说说 Synchronized 和 ReentrantLock</span></a></h2>`,19)),e("p",null,[n[1]||(n[1]=a("详情见: ")),l(t,{to:"/java/2_advanced.md"},{default:i(()=>n[0]||(n[0]=[a("Java锁")])),_:1})]),n[5]||(n[5]=s('<h2 id="七、java8-的-concurrenthashmap-为什么放弃了分段锁" tabindex="-1"><a class="header-anchor" href="#七、java8-的-concurrenthashmap-为什么放弃了分段锁"><span>七、Java8 的 ConcurrentHashMap 为什么放弃了分段锁</span></a></h2><h2 id="八、抽象类和接口的区别" tabindex="-1"><a class="header-anchor" href="#八、抽象类和接口的区别"><span>八、抽象类和接口的区别</span></a></h2><h2 id="十、继承和聚合的区别在哪" tabindex="-1"><a class="header-anchor" href="#十、继承和聚合的区别在哪"><span>十、继承和聚合的区别在哪</span></a></h2><h2 id="十一、说说java的io类" tabindex="-1"><a class="header-anchor" href="#十一、说说java的io类"><span>十一、说说Java的IO类</span></a></h2><h2 id="十一、io模型的理解" tabindex="-1"><a class="header-anchor" href="#十一、io模型的理解"><span>十一、IO模型的理解</span></a></h2>',5)),e("p",null,[n[3]||(n[3]=a("详情见: ")),l(t,{to:"/netty/1.md"},{default:i(()=>n[2]||(n[2]=[a("Netty")])),_:1})]),n[6]||(n[6]=s('<h2 id="十二、反射的原理" tabindex="-1"><a class="header-anchor" href="#十二、反射的原理"><span>十二、反射的原理</span></a></h2><h2 id="写出三种单例模式实现" tabindex="-1"><a class="header-anchor" href="#写出三种单例模式实现"><span>写出三种单例模式实现</span></a></h2><h2 id="类加载器加载机制" tabindex="-1"><a class="header-anchor" href="#类加载器加载机制"><span>类加载器加载机制</span></a></h2><h2 id="泛型的作用和应用" tabindex="-1"><a class="header-anchor" href="#泛型的作用和应用"><span>泛型的作用和应用</span></a></h2><h2 id="java8的stream" tabindex="-1"><a class="header-anchor" href="#java8的stream"><span>Java8的Stream</span></a></h2><h3 id="_1、普通stream" tabindex="-1"><a class="header-anchor" href="#_1、普通stream"><span>1、普通Stream</span></a></h3><h3 id="_2、并行stream" tabindex="-1"><a class="header-anchor" href="#_2、并行stream"><span>2、并行Stream</span></a></h3><h2 id="sort-底层使用的是什么算法" tabindex="-1"><a class="header-anchor" href="#sort-底层使用的是什么算法"><span>sort() 底层使用的是什么算法</span></a></h2><h2 id="常见算法的复杂度是多少" tabindex="-1"><a class="header-anchor" href="#常见算法的复杂度是多少"><span>常见算法的复杂度是多少</span></a></h2><p>更多详情，请查看算法篇</p><h2 id="servlet-的生命周期" tabindex="-1"><a class="header-anchor" href="#servlet-的生命周期"><span>Servlet 的生命周期</span></a></h2>',11))])}const v=p(r,[["render",u],["__file","0_java.html.vue"]]),m=JSON.parse('{"path":"/interview/0_java.html","title":"Java总结-Java","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、JAVA中的几种基本数据类型","slug":"一、java中的几种基本数据类型","link":"#一、java中的几种基本数据类型","children":[]},{"level":2,"title":"二、String 类能被继承吗","slug":"二、string-类能被继承吗","link":"#二、string-类能被继承吗","children":[]},{"level":2,"title":"三、讲讲类的实例化顺序","slug":"三、讲讲类的实例化顺序","link":"#三、讲讲类的实例化顺序","children":[{"level":3,"title":"1、加载（Loading）","slug":"_1、加载-loading","link":"#_1、加载-loading","children":[]},{"level":3,"title":"2、连接（Linking）","slug":"_2、连接-linking","link":"#_2、连接-linking","children":[]},{"level":3,"title":"3、初始化（Initialization）","slug":"_3、初始化-initialization","link":"#_3、初始化-initialization","children":[]}]},{"level":2,"title":"说说 Synchronized 和 ReentrantLock","slug":"说说-synchronized-和-reentrantlock","link":"#说说-synchronized-和-reentrantlock","children":[]},{"level":2,"title":"七、Java8 的 ConcurrentHashMap 为什么放弃了分段锁","slug":"七、java8-的-concurrenthashmap-为什么放弃了分段锁","link":"#七、java8-的-concurrenthashmap-为什么放弃了分段锁","children":[]},{"level":2,"title":"八、抽象类和接口的区别","slug":"八、抽象类和接口的区别","link":"#八、抽象类和接口的区别","children":[]},{"level":2,"title":"十、继承和聚合的区别在哪","slug":"十、继承和聚合的区别在哪","link":"#十、继承和聚合的区别在哪","children":[]},{"level":2,"title":"十一、说说Java的IO类","slug":"十一、说说java的io类","link":"#十一、说说java的io类","children":[]},{"level":2,"title":"十一、IO模型的理解","slug":"十一、io模型的理解","link":"#十一、io模型的理解","children":[]},{"level":2,"title":"十二、反射的原理","slug":"十二、反射的原理","link":"#十二、反射的原理","children":[]},{"level":2,"title":"写出三种单例模式实现","slug":"写出三种单例模式实现","link":"#写出三种单例模式实现","children":[]},{"level":2,"title":"类加载器加载机制","slug":"类加载器加载机制","link":"#类加载器加载机制","children":[]},{"level":2,"title":"泛型的作用和应用","slug":"泛型的作用和应用","link":"#泛型的作用和应用","children":[]},{"level":2,"title":"Java8的Stream","slug":"java8的stream","link":"#java8的stream","children":[{"level":3,"title":"1、普通Stream","slug":"_1、普通stream","link":"#_1、普通stream","children":[]},{"level":3,"title":"2、并行Stream","slug":"_2、并行stream","link":"#_2、并行stream","children":[]}]},{"level":2,"title":"sort() 底层使用的是什么算法","slug":"sort-底层使用的是什么算法","link":"#sort-底层使用的是什么算法","children":[]},{"level":2,"title":"常见算法的复杂度是多少","slug":"常见算法的复杂度是多少","link":"#常见算法的复杂度是多少","children":[]},{"level":2,"title":"Servlet 的生命周期","slug":"servlet-的生命周期","link":"#servlet-的生命周期","children":[]}],"git":{"updatedTime":1738592250000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"}]},"filePathRelative":"interview/0_java.md"}');export{v as comp,m as data};
