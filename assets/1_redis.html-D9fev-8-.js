import{_ as l,c as t,a as s,b as a,d as n,e as r,f as d,r as c,o as p}from"./app-DePwwYXz.js";const o="/clarence-java-doc/assets/redis_distribute_lock-BtQSjvk2.png",h="/clarence-java-doc/assets/all_copy-B_F6H1jn.png",u="/clarence-java-doc/assets/continue_copy-DhB_USxq.png",m={};function g(_,e){const i=c("RouteLink");return p(),t("div",null,[e[3]||(e[3]=s('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><p>官网地址：<a href="https://redis.io/" target="_blank" rel="noopener noreferrer">https://redis.io/</a></p><p>官方代码：<a href="https://github.com/redis" target="_blank" rel="noopener noreferrer">https://github.com/redis</a></p><h2 id="一、redis数据结构" tabindex="-1"><a class="header-anchor" href="#一、redis数据结构"><span>一、Redis数据结构</span></a></h2>',4)),a("p",null,[e[1]||(e[1]=a("strong",null,"基础类型",-1)),e[2]||(e[2]=n("： ")),r(i,{to:"/interview/2_cache.md#六、redis-的常用数据结构有哪些"},{default:d(()=>e[0]||(e[0]=[n("redis-常用的数据结构")])),_:1})]),e[4]||(e[4]=s('<h3 id="_1、hyperloglog" tabindex="-1"><a class="header-anchor" href="#_1、hyperloglog"><span>1、HyperLogLog</span></a></h3><ul><li>用于 <strong>基数统计</strong>（比如：统计网站独立访问人数UV）。</li><li>特点是：占用极小的内存（12KB），可以近似统计数十亿个数据元素，误差在 0.81% 左右。</li><li>适用场景： <ul><li>统计用户访问量</li><li>活跃用户去重</li><li>商品浏览量去重</li></ul></li></ul><p>✅ 典型命令：<code>PFADD</code>, <code>PFCOUNT</code>, <code>PFMERGE</code></p><hr><h3 id="_2、bitmap" tabindex="-1"><a class="header-anchor" href="#_2、bitmap"><span>2、Bitmap</span></a></h3><ul><li>位图数据结构，用于按位存储数据，适合用来快速记录、统计、判断海量数据。</li><li>适用场景： <ul><li>签到功能（某天是否签到）</li><li>活跃状态标记（某个用户是否在线）</li><li>性能极佳，适合批量快速统计。</li></ul></li></ul><p>✅ 典型命令：<code>SETBIT</code>, <code>GETBIT</code>, <code>BITCOUNT</code></p><hr><h3 id="_3、geo" tabindex="-1"><a class="header-anchor" href="#_3、geo"><span>3、GEO</span></a></h3><ul><li>Redis 提供的地理位置存储和检索能力，基于 SortedSet 底层实现。</li><li>适用场景： <ul><li>附近的人、附近的店</li><li>基于位置的服务（LBS）</li></ul></li></ul><p>✅ 典型命令：<code>GEOADD</code>, <code>GEORADIUS</code>, <code>GEODIST</code></p><hr><h3 id="_4、stream" tabindex="-1"><a class="header-anchor" href="#_4、stream"><span>4、Stream</span></a></h3><ul><li>Redis 5.0 新增的数据类型，支持<strong>消息队列</strong>场景。</li><li>相比 List 更强大，天然支持： <ul><li>消息持久化</li><li>消息确认机制（ACK）</li><li>消费组（Consumer Group）模式，支持水平扩展</li></ul></li><li>适用场景： <ul><li>异步解耦</li><li>消息流处理</li><li>任务分发系统</li></ul></li></ul><p>✅ 典型命令：<code>XADD</code>, <code>XREAD</code>, <code>XGROUP</code></p><h2 id="二、redis线程模型" tabindex="-1"><a class="header-anchor" href="#二、redis线程模型"><span>二、Redis线程模型</span></a></h2><p>介绍线程模型的内容...</p><h2 id="三、布隆过滤器" tabindex="-1"><a class="header-anchor" href="#三、布隆过滤器"><span>三、布隆过滤器</span></a></h2><h2 id="四、redis分布式锁" tabindex="-1"><a class="header-anchor" href="#四、redis分布式锁"><span>四、Redis分布式锁</span></a></h2><p>为了更好的理解分布式锁的原理，我这边自己画张图通过这张图来分析：</p><p><img src="'+o+`" alt="img.png"></p><h3 id="_1、加锁机制" tabindex="-1"><a class="header-anchor" href="#_1、加锁机制"><span>1、加锁机制</span></a></h3><p>线程去获取锁，获取成功: 执行 lua脚本，保存数据到 redis数据库。</p><p>线程去获取锁，获取失败: 一直通过 while循环尝试获取锁，获取成功后，执行 lua脚本，保存数据到 redis数据库。</p><h3 id="_2、watch-dog自动延期机制" tabindex="-1"><a class="header-anchor" href="#_2、watch-dog自动延期机制"><span>2、Watch dog自动延期机制</span></a></h3><p>在一个分布式环境下，假如一个线程获得锁后，突然服务器宕机了，那么这个时候在一定时间后这个锁会自动释放，你也可以设置锁的有效时间(不设置默认30秒），这样的目的主要是防止死锁的发生。</p><p>但在实际开发中会有下面一种情况:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//设置锁1秒过期</span></span>
<span class="line">redissonLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token string">&quot;redisson&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 业务逻辑需要咨询2秒</span>
<span class="line">*/</span></span>
<span class="line">redissonLock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token string">&quot;redisson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 线程1 进来获得锁后，线程一切正常并没有宕机，但它的业务逻辑需要执行2秒，这就会有个问题，</span>
<span class="line">* 在 线程1 执行1秒后,这个锁就自动过期了，那么这个时候 线程2 进来了。那么就存在 线程1和线程2 </span>
<span class="line">* 同时在这段业务逻辑里执行代码，这当然是不合理的。而且如果是这种情况，那么在解锁时系统会抛异常，</span>
<span class="line">* 因为解锁和加锁已经不是同一线程了，具体后面代码演示。</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这个时候看门狗就出现了，它的作用就是 线程1 业务还没有执行完，时间就过了，线程1 还想持有锁的话，就会启动一个 watch dog后台线程，不断的延长锁 key的生存时间。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>注意：正常这个看门狗线程是不启动的，还有就是这个看门狗启动后对整体性能也会有一定影响，所以<strong>不建议开启看门狗</strong>。</p></div><h3 id="_3、redis-lua脚本" tabindex="-1"><a class="header-anchor" href="#_3、redis-lua脚本"><span>3、Redis lua脚本</span></a></h3><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Todo: to be continue...</p></div><h2 id="五、redis主从复制原理" tabindex="-1"><a class="header-anchor" href="#五、redis主从复制原理"><span>五、Redis主从复制原理</span></a></h2><h3 id="_1、全量复制" tabindex="-1"><a class="header-anchor" href="#_1、全量复制"><span>1、全量复制</span></a></h3><p><img src="`+h+'" alt="img.png"></p><h3 id="_2、断点续传" tabindex="-1"><a class="header-anchor" href="#_2、断点续传"><span>2、断点续传</span></a></h3><p><img src="'+u+'" alt="img_1.png"></p><h2 id="六、redis性能优化" tabindex="-1"><a class="header-anchor" href="#六、redis性能优化"><span>六、Redis性能优化</span></a></h2>',38))])}const b=l(m,[["render",g],["__file","1_redis.html.vue"]]),k=JSON.parse('{"path":"/cache/1_redis.html","title":"Redis","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Redis数据结构","slug":"一、redis数据结构","link":"#一、redis数据结构","children":[{"level":3,"title":"1、HyperLogLog","slug":"_1、hyperloglog","link":"#_1、hyperloglog","children":[]},{"level":3,"title":"2、Bitmap","slug":"_2、bitmap","link":"#_2、bitmap","children":[]},{"level":3,"title":"3、GEO","slug":"_3、geo","link":"#_3、geo","children":[]},{"level":3,"title":"4、Stream","slug":"_4、stream","link":"#_4、stream","children":[]}]},{"level":2,"title":"二、Redis线程模型","slug":"二、redis线程模型","link":"#二、redis线程模型","children":[]},{"level":2,"title":"三、布隆过滤器","slug":"三、布隆过滤器","link":"#三、布隆过滤器","children":[]},{"level":2,"title":"四、Redis分布式锁","slug":"四、redis分布式锁","link":"#四、redis分布式锁","children":[{"level":3,"title":"1、加锁机制","slug":"_1、加锁机制","link":"#_1、加锁机制","children":[]},{"level":3,"title":"2、Watch dog自动延期机制","slug":"_2、watch-dog自动延期机制","link":"#_2、watch-dog自动延期机制","children":[]},{"level":3,"title":"3、Redis lua脚本","slug":"_3、redis-lua脚本","link":"#_3、redis-lua脚本","children":[]}]},{"level":2,"title":"五、Redis主从复制原理","slug":"五、redis主从复制原理","link":"#五、redis主从复制原理","children":[{"level":3,"title":"1、全量复制","slug":"_1、全量复制","link":"#_1、全量复制","children":[]},{"level":3,"title":"2、断点续传","slug":"_2、断点续传","link":"#_2、断点续传","children":[]}]},{"level":2,"title":"六、Redis性能优化","slug":"六、redis性能优化","link":"#六、redis性能优化","children":[]}],"git":{"updatedTime":1745242686000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":5,"url":"https://github.com/Clarence"}]},"filePathRelative":"cache/1_redis.md"}');export{b as comp,k as data};
