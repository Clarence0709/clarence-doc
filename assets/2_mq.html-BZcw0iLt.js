import{_ as a,c as p,b as r,o as t}from"./app-Cz_81Qh3.js";const n="/clarence-doc/assets/mq_1-CtpjydAx.png",l="/clarence-doc/assets/mq_flow-Dji1cxmB.png",o={};function s(c,e){return t(),p("div",null,e[0]||(e[0]=[r('<h1 id="java总结-消息队列" tabindex="-1"><a class="header-anchor" href="#java总结-消息队列"><span>Java总结-消息队列</span></a></h1><h2 id="一、消息队列的使用场景" tabindex="-1"><a class="header-anchor" href="#一、消息队列的使用场景"><span>一、消息队列的使用场景</span></a></h2><p>以下介绍消息队列在实际应用常用的使用场景。异步处理、应用解耦、流量削锋、日志处理和消息通讯五个个场景： 【1】异步处理： 场景说明：用户注册后，需要发注册邮件和注册短信。</p><p><img src="'+n+'" alt="img.png"></p><p><strong>引入消息队列后架构如下</strong>：</p><p>用户的响应时间=注册信息写入数据库的时间，例如50毫秒。 发注册邮箱、发注册短信写入消息队列 后，直接返回客户端，因写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。</p><p>按照传统的做法：</p><p>①、串行方式，将注册信息写入数据库成功后，发注册邮件，再发送注册短信，以上三个成功后，返回客户端。可能需要150毫秒，这样使用消息队列提高了3倍。</p><p>②、并行方式，将注册信息写入数据库成功后，发送注册邮件，同时发送注册短信。也可能需要100毫秒，这样使用消息队列提高了2倍。</p><p>【2】应用解耦：</p><p>场景说明：用户下单后，订单系统需要通知库存系统。如下图：</p><p>todo put image...</p><p>【3】流量削锋：</p><p>场景说明：秒杀或团抢活动中使用广泛。秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。一般需要在应用前端加入消息队列。</p><p>todo put image...</p><p>【4】日志处理：</p><p>指将消息队列用在日志处理中，比如 Kafka 的应用，解决大量日志传输的问题。</p><p>todo put image...</p><p>【5】消息通信：</p><p>消息队列一般都内置了高效的通信机制，因此也可以用纯消息通信。比如实现点对点消息队列，或者聊天室。</p><p>todo put image...</p><h2 id="二、消息队列的工作流程" tabindex="-1"><a class="header-anchor" href="#二、消息队列的工作流程"><span>二、消息队列的工作流程</span></a></h2><p><img src="'+l+'" alt="img.png"></p><p>【1】发送端 MQ-Product （消息生产者）将消息发送给 MQ-server；</p><p>【2】MQ-server 将消息落地，持久化到数据库等；</p><p>【3】MQ-server 回 ACK 给 MQ-Producer；</p><p>【4】MQ-server 将消息发送给消息接收端 MQ-Consumer （消息消费者）；</p><p>【5】MQ-Consumer 消费接收到消息后发送 ACK 给 MQ-server；</p><p>【6】MQ-server 将落地消息删除；</p><h2 id="三、mq如何保证消息不丢失" tabindex="-1"><a class="header-anchor" href="#三、mq如何保证消息不丢失"><span>三、MQ如何保证消息不丢失？</span></a></h2><p>1、生产者消息发送回调处理：</p><p>即为异步发送，处理callback的重试机制；</p><p>2、消息刷盘完后，响应producer：</p><p>3、消息消费完成后，响应消息服务器：</p><p>总结：但是针对于不紧要的数据，提高系统速度，可以接受消息丢失问题</p><h2 id="四、mq消息的幂等性-重复消费-如何保证" tabindex="-1"><a class="header-anchor" href="#四、mq消息的幂等性-重复消费-如何保证"><span>四、Mq消息的幂等性（重复消费）如何保证？</span></a></h2><p>开篇：所有Mq产品都没有主动提供消费者重复消费的问题，最好的方式是自己做一个全局的唯一标识</p><p>1、全局唯一标识ID：</p><p>2、使用去重存储（如 Redis、数据库） 保存已经处理的消息标识符</p><p>3、其他方案：todo</p><h2 id="五、mq如何保证消息顺序消费" tabindex="-1"><a class="header-anchor" href="#五、mq如何保证消息顺序消费"><span>五、Mq如何保证消息顺序消费？</span></a></h2><p>todo</p><h2 id="六、mq如何保证消息的高效读写" tabindex="-1"><a class="header-anchor" href="#六、mq如何保证消息的高效读写"><span>六、MQ如何保证消息的高效读写</span></a></h2><p>todo</p><h2 id="七、mq如何保证分布式事务的最终一致性" tabindex="-1"><a class="header-anchor" href="#七、mq如何保证分布式事务的最终一致性"><span>七、MQ如何保证分布式事务的最终一致性</span></a></h2><p>todo</p><h2 id="八、如何设计一个mq" tabindex="-1"><a class="header-anchor" href="#八、如何设计一个mq"><span>八、如何设计一个MQ？</span></a></h2><p>todo</p><h2 id="九、rocketmq常见面试题" tabindex="-1"><a class="header-anchor" href="#九、rocketmq常见面试题"><span>九、RocketMQ常见面试题：</span></a></h2><p>以下内容待实践后调整：</p><blockquote><p>参考资料：<a href="https://blog.csdn.net/ctwctw/article/details/107463884" target="_blank" rel="noopener noreferrer">RocketMQ常见面试题</a></p></blockquote><h2 id="十、kafka常见面试题" tabindex="-1"><a class="header-anchor" href="#十、kafka常见面试题"><span>十、Kafka常见面试题：</span></a></h2><p>以下内容待实践后调整：</p><blockquote><p>参考资料：<a href="https://javabetter.cn/interview/kafka-40.html" target="_blank" rel="noopener noreferrer">Kafka常见面试题</a></p></blockquote><h2 id="十一、rocketmq与kafka有何不同" tabindex="-1"><a class="header-anchor" href="#十一、rocketmq与kafka有何不同"><span>十一、RocketMQ与Kafka有何不同？</span></a></h2><blockquote><p><a href="https://mp.weixin.qq.com/s/P40GLfVa7oFq0c0JgolvIQ" target="_blank" rel="noopener noreferrer">RocketMQ与Kafka有何不同(上)</a></p><p><a href="https://mp.weixin.qq.com/s/ioIr3nTBX5AMm3r8f49Mjw" target="_blank" rel="noopener noreferrer">RocketMQ与Kafka有何不同(下)</a></p></blockquote>',56)]))}const h=a(o,[["render",s],["__file","2_mq.html.vue"]]),m=JSON.parse('{"path":"/interview/2_mq.html","title":"Java总结-消息队列","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、消息队列的使用场景","slug":"一、消息队列的使用场景","link":"#一、消息队列的使用场景","children":[]},{"level":2,"title":"二、消息队列的工作流程","slug":"二、消息队列的工作流程","link":"#二、消息队列的工作流程","children":[]},{"level":2,"title":"三、MQ如何保证消息不丢失？","slug":"三、mq如何保证消息不丢失","link":"#三、mq如何保证消息不丢失","children":[]},{"level":2,"title":"四、Mq消息的幂等性（重复消费）如何保证？","slug":"四、mq消息的幂等性-重复消费-如何保证","link":"#四、mq消息的幂等性-重复消费-如何保证","children":[]},{"level":2,"title":"五、Mq如何保证消息顺序消费？","slug":"五、mq如何保证消息顺序消费","link":"#五、mq如何保证消息顺序消费","children":[]},{"level":2,"title":"六、MQ如何保证消息的高效读写","slug":"六、mq如何保证消息的高效读写","link":"#六、mq如何保证消息的高效读写","children":[]},{"level":2,"title":"七、MQ如何保证分布式事务的最终一致性","slug":"七、mq如何保证分布式事务的最终一致性","link":"#七、mq如何保证分布式事务的最终一致性","children":[]},{"level":2,"title":"八、如何设计一个MQ？","slug":"八、如何设计一个mq","link":"#八、如何设计一个mq","children":[]},{"level":2,"title":"九、RocketMQ常见面试题：","slug":"九、rocketmq常见面试题","link":"#九、rocketmq常见面试题","children":[]},{"level":2,"title":"十、Kafka常见面试题：","slug":"十、kafka常见面试题","link":"#十、kafka常见面试题","children":[]},{"level":2,"title":"十一、RocketMQ与Kafka有何不同？","slug":"十一、rocketmq与kafka有何不同","link":"#十一、rocketmq与kafka有何不同","children":[]}],"git":{"updatedTime":1736993423000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hanchen"}]},"filePathRelative":"interview/2_mq.md"}');export{h as comp,m as data};
