import{_ as p,c as t,a as l,b as s,f as a,d as c,e as i,r as o,o as u}from"./app-DP4BXMx4.js";const r={};function d(k,n){const e=o("RouteLink");return u(),t("div",null,[n[2]||(n[2]=l(`<h1 id="常见的场景问题" tabindex="-1"><a class="header-anchor" href="#常见的场景问题"><span>常见的场景问题</span></a></h1><h2 id="一、分布式系统主键如何处理" tabindex="-1"><a class="header-anchor" href="#一、分布式系统主键如何处理"><span>一、分布式系统主键如何处理？</span></a></h2><h3 id="_1、节点生成-or-主键服务" tabindex="-1"><a class="header-anchor" href="#_1、节点生成-or-主键服务"><span>1、节点生成 or 主键服务？</span></a></h3><h3 id="_2、主键类型的选择" tabindex="-1"><a class="header-anchor" href="#_2、主键类型的选择"><span>2、主键类型的选择？</span></a></h3><h2 id="二、针对于过期的订单-如何处理" tabindex="-1"><a class="header-anchor" href="#二、针对于过期的订单-如何处理"><span>二、针对于过期的订单，如何处理？</span></a></h2><p><a href="https://mp.weixin.qq.com/s/aHtIW4vmrl-0rUcPI3T7ZQ" target="_blank" rel="noopener noreferrer">处理过期订单，Redis不推荐，那如何做呢？</a></p><h3 id="_1、消息队列" tabindex="-1"><a class="header-anchor" href="#_1、消息队列"><span>1、消息队列</span></a></h3><h3 id="_2、redisson-delayedqueue" tabindex="-1"><a class="header-anchor" href="#_2、redisson-delayedqueue"><span>2、Redisson DelayedQueue</span></a></h3><h3 id="_3、redis-过期监听" tabindex="-1"><a class="header-anchor" href="#_3、redis-过期监听"><span>3、Redis 过期监听</span></a></h3><h3 id="_4、rabbitmq-死信队列" tabindex="-1"><a class="header-anchor" href="#_4、rabbitmq-死信队列"><span>4、RabbitMQ 死信队列</span></a></h3><h3 id="_5、时间轮" tabindex="-1"><a class="header-anchor" href="#_5、时间轮"><span>5、时间轮</span></a></h3><h2 id="三、如何实现自动登录功能" tabindex="-1"><a class="header-anchor" href="#三、如何实现自动登录功能"><span>三、如何实现自动登录功能？</span></a></h2><h2 id="四、对外的api安全问题如何保证" tabindex="-1"><a class="header-anchor" href="#四、对外的api安全问题如何保证"><span>四、对外的Api安全问题如何保证？</span></a></h2><p>完成自己的实现后，继续写完</p><p><a href="https://mp.weixin.qq.com/s/kZZMQcAQh4XLF8sgsxT__g" target="_blank" rel="noopener noreferrer">Spring Cloud微服务，如何保证对外接口的安全？</a></p><h2 id="五、基于阻塞队列实现生产者和消费者模型" tabindex="-1"><a class="header-anchor" href="#五、基于阻塞队列实现生产者和消费者模型"><span>五、基于阻塞队列实现生产者和消费者模型</span></a></h2><blockquote><p>参考地址：<a href="https://blog.csdn.net/m0_73381672/article/details/133690633" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/m0_73381672/article/details/133690633</a></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//实现阻塞队列</span></span>
<span class="line"><span class="token keyword">class</span> myBlockingQueue<span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">//锁对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">//队列采用循环队列  数组</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">//头指针 加volatile防止内存可见性问题</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//尾指针</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//有效长度</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">//带有阻塞性质的入队操作put</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//队列满时</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">==</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//阻塞等待 等待另一个线程调用notify方法唤醒</span></span>
<span class="line">                object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//队列不满 入队列</span></span>
<span class="line">            data<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">;</span></span>
<span class="line">            tail<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            size<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            object<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">//由于数组循环使用 也防止索引出界</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>tail<span class="token operator">==</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">//带有阻塞性质的出队列操作</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//队列为空</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//阻塞等待</span></span>
<span class="line">                object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//队列不为空</span></span>
<span class="line">            <span class="token class-name">String</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            head<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            size<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//唤醒</span></span>
<span class="line">            object<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">//借助阻塞队列 实现生产者消费者模型</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyBlockingQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">//生产者模型</span></span>
<span class="line">        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;生产者生产&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    num<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token comment">//Thread.sleep(1000);     //生产者有节奏生产</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">//消费者模型</span></span>
<span class="line">        <span class="token class-name">Thread</span> t2  <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者消费&quot;</span><span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//消费者有节奏消费</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、如何设计一个高并发系统" tabindex="-1"><a class="header-anchor" href="#六、如何设计一个高并发系统"><span>六、如何设计一个高并发系统？</span></a></h2>`,19)),s("p",null,[n[1]||(n[1]=a("解答：")),c(e,{to:"/currency/4_high_concurrency_sys"},{default:i(()=>n[0]||(n[0]=[a("高并发-如何设计一个高并发系统？")])),_:1})]),n[3]||(n[3]=s("h2",{id:"七、分布式场景下是否适用-synchronized-加锁机制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#七、分布式场景下是否适用-synchronized-加锁机制"},[s("span",null,"七、分布式场景下是否适用 synchronized 加锁机制？")])],-1)),n[4]||(n[4]=s("p",null,[a("解答："),s("a",{href:"https://mp.weixin.qq.com/s/IGS_8pIc2wSKN88eMEJmSg",target:"_blank",rel:"noopener noreferrer"},"分布式场景下是否适用 synchronized 加锁机制？")],-1))])}const m=p(r,[["render",d],["__file","0_scene.html.vue"]]),b=JSON.parse('{"path":"/scene/0_scene.html","title":"常见的场景问题","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、分布式系统主键如何处理？","slug":"一、分布式系统主键如何处理","link":"#一、分布式系统主键如何处理","children":[{"level":3,"title":"1、节点生成 or 主键服务？","slug":"_1、节点生成-or-主键服务","link":"#_1、节点生成-or-主键服务","children":[]},{"level":3,"title":"2、主键类型的选择？","slug":"_2、主键类型的选择","link":"#_2、主键类型的选择","children":[]}]},{"level":2,"title":"二、针对于过期的订单，如何处理？","slug":"二、针对于过期的订单-如何处理","link":"#二、针对于过期的订单-如何处理","children":[{"level":3,"title":"1、消息队列","slug":"_1、消息队列","link":"#_1、消息队列","children":[]},{"level":3,"title":"2、Redisson DelayedQueue","slug":"_2、redisson-delayedqueue","link":"#_2、redisson-delayedqueue","children":[]},{"level":3,"title":"3、Redis 过期监听","slug":"_3、redis-过期监听","link":"#_3、redis-过期监听","children":[]},{"level":3,"title":"4、RabbitMQ 死信队列","slug":"_4、rabbitmq-死信队列","link":"#_4、rabbitmq-死信队列","children":[]},{"level":3,"title":"5、时间轮","slug":"_5、时间轮","link":"#_5、时间轮","children":[]}]},{"level":2,"title":"三、如何实现自动登录功能？","slug":"三、如何实现自动登录功能","link":"#三、如何实现自动登录功能","children":[]},{"level":2,"title":"四、对外的Api安全问题如何保证？","slug":"四、对外的api安全问题如何保证","link":"#四、对外的api安全问题如何保证","children":[]},{"level":2,"title":"五、基于阻塞队列实现生产者和消费者模型","slug":"五、基于阻塞队列实现生产者和消费者模型","link":"#五、基于阻塞队列实现生产者和消费者模型","children":[]},{"level":2,"title":"六、如何设计一个高并发系统？","slug":"六、如何设计一个高并发系统","link":"#六、如何设计一个高并发系统","children":[]},{"level":2,"title":"七、分布式场景下是否适用 synchronized 加锁机制？","slug":"七、分布式场景下是否适用-synchronized-加锁机制","link":"#七、分布式场景下是否适用-synchronized-加锁机制","children":[]}],"git":{"updatedTime":1740983626000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hanchen"}]},"filePathRelative":"scene/0_scene.md"}');export{m as comp,b as data};
