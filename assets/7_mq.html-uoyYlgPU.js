import{_ as s,c as a,b as e,o as p}from"./app-h12Y4w6N.js";const t="/clarence-doc/assets/mq_flow-Dji1cxmB.png",c="/clarence-doc/assets/prevent_mq_miss-DykVHPWw.png",l="/clarence-doc/assets/RocketMQ_structure-BsifauJf.png",i="/clarence-doc/assets/Kafka_structure-DD6U15PR.png",o={};function u(r,n){return p(),a("div",null,n[0]||(n[0]=[e('<h1 id="java总结-消息队列" tabindex="-1"><a class="header-anchor" href="#java总结-消息队列"><span>Java总结-消息队列</span></a></h1><h2 id="一、消息队列的使用场景" tabindex="-1"><a class="header-anchor" href="#一、消息队列的使用场景"><span>一、消息队列的使用场景</span></a></h2><p>以下介绍消息队列在实际应用常用的使用场景。异步处理、应用解耦、流量削锋三个个场景：</p><h3 id="_1、异步处理" tabindex="-1"><a class="header-anchor" href="#_1、异步处理"><span>1、异步处理</span></a></h3><p>例如：用户注册后，需要发注册邮件和注册短信</p><h3 id="_2、应用解耦" tabindex="-1"><a class="header-anchor" href="#_2、应用解耦"><span>2、应用解耦</span></a></h3><p>例如：用户下单后，订单系统需要通知库存系统。</p><h3 id="_3、流量削锋" tabindex="-1"><a class="header-anchor" href="#_3、流量削锋"><span>3、流量削锋</span></a></h3><p>例如：<strong>秒杀活动</strong>，流量暴增，应用容易挂掉。一般需要在应用前端加入消息队列。</p><h2 id="二、消息队列的工作流程" tabindex="-1"><a class="header-anchor" href="#二、消息队列的工作流程"><span>二、消息队列的工作流程？</span></a></h2><p><img src="'+t+'" alt="img.png"></p><p>【1】发送端 MQ-Product （消息生产者）将消息发送给 MQ-server；</p><p>【2】MQ-server 将消息落地，持久化到数据库等；</p><p>【3】MQ-server 回 ACK 给 MQ-Producer；</p><p>【4】MQ-server 将消息发送给消息接收端 MQ-Consumer （消息消费者）；</p><p>【5】MQ-Consumer 消费接收到消息后发送 ACK 给 MQ-server；</p><p>【6】MQ-server 将落地消息删除；</p><h2 id="三、mq如何保证消息不丢失" tabindex="-1"><a class="header-anchor" href="#三、mq如何保证消息不丢失"><span>三、MQ如何保证消息不丢失？</span></a></h2><p><img src="'+c+`" alt="img.png"></p><p>1、生产者消息发送回调处理：</p><p>即为异步发送，处理callback的重试机制；</p><p>2、主从复制消息丢失处理</p><ul><li>如 RocketMQ的消息的强同步复制（同步复制模式）或者异步复制</li><li>如 Kafka 默认提供 ISR（in-sync replica）机制，确保所有副本都同步更新数据</li></ul><p>3、消息刷盘完后，响应producer：</p><p>4、消息消费完成后，响应消息 mq-server：</p><p>总结：但是针对于不紧要的数据，提高系统速度，可以接受消息丢失问题</p><h2 id="四、mq消息的幂等性-重复消费-如何保证" tabindex="-1"><a class="header-anchor" href="#四、mq消息的幂等性-重复消费-如何保证"><span>四、Mq消息的幂等性（重复消费）如何保证？</span></a></h2><p>开篇：所有Mq产品都没有主动提供消费者重复消费的问题，最好的方式是自己做一个全局的唯一标识</p><p>1、全局唯一标识ID：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> messageId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>idempotentRepository<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 消息已处理，忽略</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 处理消息</span></span>
<span class="line"><span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 标记消息为已处理</span></span>
<span class="line">idempotentRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用去重存储（如 Redis、数据库） 保存已经处理的消息标识符</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>messageId<span class="token punctuation">,</span> <span class="token string">&quot;processed&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 消息重复，忽略</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、幂等处理逻辑</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">INSERT</span> <span class="token class-name">INTO</span> orders <span class="token punctuation">(</span>order_id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> amount<span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token char">&#39;12345&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">ON</span> <span class="token constant">DUPLICATE</span> <span class="token constant">KEY</span> <span class="token class-name">UPDATE</span> updated_at <span class="token operator">=</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、MQ 自带机制</p><p>一些高级消息中间件（如 RocketMQ、Kafka）提供了重复消费控制的机制。</p><p><strong>RocketMQ：唯一标识及其事务</strong></p><ul><li>使用消息的 msgId 或 unique key 。</li><li>配合事务消息进行两阶段提交（prepare 和 confirm 阶段）。</li></ul><p><strong>Kafka： 消费组结合 offset 提交</strong></p><ul><li>通过消费者维护 offset，避免重复拉取消息。</li><li>手动控制 offset 提交时机，仅在成功处理消息后更新。</li></ul><h2 id="五、mq如何保证消息顺序消费" tabindex="-1"><a class="header-anchor" href="#五、mq如何保证消息顺序消费"><span>五、Mq如何保证消息顺序消费？</span></a></h2><h3 id="_1、单队列单消费者" tabindex="-1"><a class="header-anchor" href="#_1、单队列单消费者"><span>1、单队列单消费者</span></a></h3><ul><li><p>生产者：将相关联的消息发送到同一条队列中。</p></li><li><p>消费者：设置单个消费者依次处理消息，确保消费顺序。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>优点： 实现简单，天然保持顺序性。</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>缺点： 队列吞吐量有限，性能受单消费者影响。</p></div><p>例如,RocketMQ提供了如下方案：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//顺序消息发送。</span></span>
<span class="line"><span class="token class-name">MessageBuilder</span> messageBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBuilderImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">&quot;messageKey&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&quot;messageTag&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//设置顺序消息的排序分组，该分组尽量保持离散，避免热点排序分组。</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setMessageGroup</span><span class="token punctuation">(</span><span class="token string">&quot;fifoGroup001&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//消息体。</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;messageBody&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//发送消息，需要关注发送结果，并捕获失败等异常</span></span>
<span class="line">    <span class="token class-name">SendReceipt</span> sendReceipt <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendReceipt<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//消费顺序消息时，需要确保当前消费者分组是顺序投递模式，否则仍然按并发乱序投递。</span></span>
<span class="line"><span class="token comment">//消费示例一：使用PushConsumer消费顺序消息，只需要在消费监听器处理即可。</span></span>
<span class="line"><span class="token class-name">MessageListener</span> messageListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumeResult</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">MessageView</span> messageView<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//根据消费结果返回状态。</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ConsumeResult</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//消费示例二：使用SimpleConsumer消费顺序消息，主动获取消息进行消费处理并提交消费结果。</span></span>
<span class="line"><span class="token comment">//需要注意的是，同一个MessageGroup的消息，如果前序消息没有消费完成，再次调用Receive是获取不到后续消息的。</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageView</span><span class="token punctuation">&gt;</span></span> messageViewList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    messageViewList <span class="token operator">=</span> simpleConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    messageViewList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//消费处理完成后，需要主动调用ACK提交消费结果。</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            simpleConsumer<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、按分区或分片管理" tabindex="-1"><a class="header-anchor" href="#_2、按分区或分片管理"><span>2、按分区或分片管理</span></a></h3><p>使用消息队列的分区机制（如 Kafka 的分区，RocketMQ 的队列）。</p><p>对某种业务键（如订单号、用户 ID 等）进行哈希计算，将同一键的消息路由到同一个分区。 消费者按分区逐条消费，保证分区内的消息顺序。</p><ul><li>发送消息时路由分区： 生产者发送消息时，根据业务键计算分区：</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> partition <span class="token operator">=</span> businessKey<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> numPartitions<span class="token punctuation">;</span></span>
<span class="line">producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> partition<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>分区消费处理方案：</p><ul><li>单线程，消费者为每个分区分配单独的线程，按顺序拉取和处理消息。</li><li>使用分布式锁，实现按顺序拉取和处理消息。</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>优点： 可以并行处理不同分区，性能更高。 分区内部顺序可保证。</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>缺点： 跨分区的全局顺序无法保证。 分区配置复杂度增加。</p></div><h3 id="_3、手动定制消息顺序" tabindex="-1"><a class="header-anchor" href="#_3、手动定制消息顺序"><span>3、手动定制消息顺序</span></a></h3><p>如果在RabbitMQ或者Kafka中，就需要自行设计顺序消费逻辑；</p><h2 id="六、mq如何保证消息的高效读写" tabindex="-1"><a class="header-anchor" href="#六、mq如何保证消息的高效读写"><span>六、MQ如何保证消息的高效读写</span></a></h2><p>todo</p><h2 id="七、mq如何保证分布式事务的最终一致性" tabindex="-1"><a class="header-anchor" href="#七、mq如何保证分布式事务的最终一致性"><span>七、MQ如何保证分布式事务的最终一致性</span></a></h2><p>todo</p><h2 id="八、如何设计一个mq" tabindex="-1"><a class="header-anchor" href="#八、如何设计一个mq"><span>八、如何设计一个MQ？</span></a></h2><p>todo</p><h2 id="九、rocketmq常见面试题" tabindex="-1"><a class="header-anchor" href="#九、rocketmq常见面试题"><span>九、RocketMQ常见面试题：</span></a></h2><p>以下内容待实践后调整：</p><blockquote><p>参考资料：<a href="https://blog.csdn.net/ctwctw/article/details/107463884" target="_blank" rel="noopener noreferrer">RocketMQ常见面试题</a></p></blockquote><h2 id="十、kafka常见面试题" tabindex="-1"><a class="header-anchor" href="#十、kafka常见面试题"><span>十、Kafka常见面试题：</span></a></h2><p>以下内容待实践后调整：</p><blockquote><p>参考资料：<a href="https://javabetter.cn/interview/kafka-40.html" target="_blank" rel="noopener noreferrer">Kafka常见面试题</a></p></blockquote><h2 id="十一、rocketmq与kafka对比" tabindex="-1"><a class="header-anchor" href="#十一、rocketmq与kafka对比"><span>十一、RocketMQ与Kafka对比？</span></a></h2><h3 id="_1、rocketmq架构图" tabindex="-1"><a class="header-anchor" href="#_1、rocketmq架构图"><span>1、RocketMQ架构图</span></a></h3><blockquote><p>参考地址：<a href="https://blog.csdn.net/weixin_45304503/article/details/140248110" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_45304503/article/details/140248110</a></p></blockquote><p><img src="`+l+'" alt="img.png"></p><h3 id="_2、kafka架构图" tabindex="-1"><a class="header-anchor" href="#_2、kafka架构图"><span>2、Kafka架构图</span></a></h3><blockquote><p>参考地址：<a href="https://blog.csdn.net/weixin_45304503/article/details/140088911" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_45304503/article/details/140088911</a></p></blockquote><p><img src="'+i+'" alt="img_1.png"></p><blockquote><p>RocketMQ与Kafka有何不同(上): <a href="https://mp.weixin.qq.com/s/P40GLfVa7oFq0c0JgolvIQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/P40GLfVa7oFq0c0JgolvIQ</a></p></blockquote><blockquote><p>RocketMQ与Kafka有何不同(下): <a href="https://mp.weixin.qq.com/s/ioIr3nTBX5AMm3r8f49Mjw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ioIr3nTBX5AMm3r8f49Mjw</a></p></blockquote>',79)]))}const d=s(o,[["render",u],["__file","7_mq.html.vue"]]),m=JSON.parse('{"path":"/interview/7_mq.html","title":"Java总结-消息队列","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、消息队列的使用场景","slug":"一、消息队列的使用场景","link":"#一、消息队列的使用场景","children":[{"level":3,"title":"1、异步处理","slug":"_1、异步处理","link":"#_1、异步处理","children":[]},{"level":3,"title":"2、应用解耦","slug":"_2、应用解耦","link":"#_2、应用解耦","children":[]},{"level":3,"title":"3、流量削锋","slug":"_3、流量削锋","link":"#_3、流量削锋","children":[]}]},{"level":2,"title":"二、消息队列的工作流程？","slug":"二、消息队列的工作流程","link":"#二、消息队列的工作流程","children":[]},{"level":2,"title":"三、MQ如何保证消息不丢失？","slug":"三、mq如何保证消息不丢失","link":"#三、mq如何保证消息不丢失","children":[]},{"level":2,"title":"四、Mq消息的幂等性（重复消费）如何保证？","slug":"四、mq消息的幂等性-重复消费-如何保证","link":"#四、mq消息的幂等性-重复消费-如何保证","children":[]},{"level":2,"title":"五、Mq如何保证消息顺序消费？","slug":"五、mq如何保证消息顺序消费","link":"#五、mq如何保证消息顺序消费","children":[{"level":3,"title":"1、单队列单消费者","slug":"_1、单队列单消费者","link":"#_1、单队列单消费者","children":[]},{"level":3,"title":"2、按分区或分片管理","slug":"_2、按分区或分片管理","link":"#_2、按分区或分片管理","children":[]},{"level":3,"title":"3、手动定制消息顺序","slug":"_3、手动定制消息顺序","link":"#_3、手动定制消息顺序","children":[]}]},{"level":2,"title":"六、MQ如何保证消息的高效读写","slug":"六、mq如何保证消息的高效读写","link":"#六、mq如何保证消息的高效读写","children":[]},{"level":2,"title":"七、MQ如何保证分布式事务的最终一致性","slug":"七、mq如何保证分布式事务的最终一致性","link":"#七、mq如何保证分布式事务的最终一致性","children":[]},{"level":2,"title":"八、如何设计一个MQ？","slug":"八、如何设计一个mq","link":"#八、如何设计一个mq","children":[]},{"level":2,"title":"九、RocketMQ常见面试题：","slug":"九、rocketmq常见面试题","link":"#九、rocketmq常见面试题","children":[]},{"level":2,"title":"十、Kafka常见面试题：","slug":"十、kafka常见面试题","link":"#十、kafka常见面试题","children":[]},{"level":2,"title":"十一、RocketMQ与Kafka对比？","slug":"十一、rocketmq与kafka对比","link":"#十一、rocketmq与kafka对比","children":[{"level":3,"title":"1、RocketMQ架构图","slug":"_1、rocketmq架构图","link":"#_1、rocketmq架构图","children":[]},{"level":3,"title":"2、Kafka架构图","slug":"_2、kafka架构图","link":"#_2、kafka架构图","children":[]}]}],"git":{"updatedTime":1739198420000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":5,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hanchen"}]},"filePathRelative":"interview/7_mq.md"}');export{d as comp,m as data};
