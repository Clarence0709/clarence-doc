import{_ as l,c as n,a as s,o as a}from"./app-D2l8NGX0.js";const t={};function r(i,e){return a(),n("div",null,e[0]||(e[0]=[s('<h1 id="高并发指标" tabindex="-1"><a class="header-anchor" href="#高并发指标"><span>高并发指标</span></a></h1><h2 id="一、高并发常见指标" tabindex="-1"><a class="header-anchor" href="#一、高并发常见指标"><span>一、高并发常见指标：</span></a></h2><h3 id="_1-qps-queries-per-second-——-每秒查询数" tabindex="-1"><a class="header-anchor" href="#_1-qps-queries-per-second-——-每秒查询数"><span>1. QPS（Queries Per Second）—— 每秒查询数</span></a></h3><ul><li>QPS 是衡量系统处理请求能力的一个重要指标，表示系统每秒钟能够处理多少个请求。</li><li>在高并发系统中，QPS 高低直接决定了系统的吞吐量和响应能力。</li></ul><h3 id="_2-tps-transactions-per-second-——-每秒事务数" tabindex="-1"><a class="header-anchor" href="#_2-tps-transactions-per-second-——-每秒事务数"><span>2. TPS（Transactions Per Second）—— 每秒事务数</span></a></h3><ul><li>TPS 是表示每秒处理的事务数量，通常用于数据库或消息队列等需要进行事务处理的场景。</li><li>与 QPS 的区别在于，TPS 是针对带有业务逻辑的事务，而 QPS 更侧重于请求的数量。</li></ul><h3 id="_3-rt-response-time-——-响应时间" tabindex="-1"><a class="header-anchor" href="#_3-rt-response-time-——-响应时间"><span>3. RT（Response Time）—— 响应时间</span></a></h3><ul><li>RT 用来衡量系统对一个请求的响应速度，即从客户端发起请求到接收到响应的时间。</li><li>通常以毫秒（ms）为单位，RT 过高意味着系统存在性能瓶颈或资源不足。</li></ul><h3 id="_4-并发数" tabindex="-1"><a class="header-anchor" href="#_4-并发数"><span>4. 并发数</span></a></h3><ul><li>并发数是指在同一时间内，系统能够处理的并发请求数量。它是衡量系统并发能力的一个重要维度。</li><li>高并发的系统需要通过负载均衡、分布式架构等方式来扩展并发数。</li></ul><h3 id="_5-吞吐量-throughput" tabindex="-1"><a class="header-anchor" href="#_5-吞吐量-throughput"><span>5. 吞吐量（Throughput）</span></a></h3><ul><li>吞吐量是指单位时间内系统可以处理的请求或数据的数量，通常与 QPS、TPS、并发数和带宽等指标结合使用。</li><li>高吞吐量通常表明系统可以在较短时间内处理大量数据。</li></ul><h2 id="二、常用的组件-qps" tabindex="-1"><a class="header-anchor" href="#二、常用的组件-qps"><span>二、常用的组件 QPS</span></a></h2><h3 id="_1-tomcat-与-undertow" tabindex="-1"><a class="header-anchor" href="#_1-tomcat-与-undertow"><span>1. <strong>Tomcat 与 Undertow</strong></span></a></h3><ul><li><strong>Tomcat</strong>：作为常用的 Java Web 容器，Tomcat 的 QPS 通常受限于服务器硬件、线程池配置、JVM 设置等因素。在高并发环境中， Tomcat 的 QPS 一般可以达到几千到数万（具体根据配置而定）。</li><li><strong>Undertow</strong>：相比 Tomcat，Undertow 是一个更轻量级的 Web 服务器，能够提供更高的并发性能，特别是在 HTTP2 和异步处理方面表现更好。 在相同硬件配置下，Undertow 的 QPS 通常能比 Tomcat 更高，适合用于微服务架构和高并发场景。</li></ul><h3 id="_2-mysql" tabindex="-1"><a class="header-anchor" href="#_2-mysql"><span>2. <strong>MySQL</strong></span></a></h3><ul><li>MySQL 的 QPS 与数据表设计、索引优化、查询语句优化、硬件配置和并发连接数等因素有关。在高并发场景中，合理的缓存和负载均衡策略可以显著提高 QPS。 <ul><li><strong>普通查询</strong>：在高效索引和优化查询的情况下，MySQL 每秒可以处理数千到数万条简单查询。</li><li><strong>事务性操作</strong>：涉及事务和较复杂查询时，QPS 会降低，可能在数百到几千条之间。</li></ul></li></ul><h3 id="_3-redis" tabindex="-1"><a class="header-anchor" href="#_3-redis"><span>3. <strong>Redis</strong></span></a></h3><ul><li>Redis 是一个高性能的内存数据库，主要用于缓存和会话存储。由于其基于内存存储，Redis 的 QPS 可以非常高，通常在数十万甚至百万级别。 <ul><li><strong>单线程模型</strong>：Redis 是单线程的，但其事件驱动模型和高效的 I/O 操作使得它能够处理大量请求。</li><li><strong>高并发下的吞吐量</strong>：Redis 的吞吐量通常高于 MySQL，特别是在数据量较小且操作简单时（如缓存查询、计数器等）。</li></ul></li></ul><h3 id="_4-消息队列-mq" tabindex="-1"><a class="header-anchor" href="#_4-消息队列-mq"><span>4. <strong>消息队列（MQ）</strong></span></a></h3><ul><li>消息队列（如 Kafka、RabbitMQ、RocketMQ）在高并发系统中用于解耦各个模块，提升系统可扩展性。它的 QPS 取决于队列的实现、 消息大小、网络带宽等因素。 <ul><li><strong>Kafka</strong>：通常可以支持数百万的消息每秒，特别适合处理大规模的日志数据和实时流处理任务。</li><li><strong>RabbitMQ</strong>：虽然支持高并发，但由于其较为复杂的路由机制，通常 QPS 会稍低于 Kafka，适合需要较高消息可靠性的场景。</li><li><strong>RocketMQ</strong>：基于分布式架构，能够承载高吞吐量，支持百万级别的 QPS。</li></ul></li></ul>',21)]))}const h=l(t,[["render",r],["__file","3_Indicator.html.vue"]]),c=JSON.parse('{"path":"/high-concurrency/3_Indicator.html","title":"高并发指标","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、高并发常见指标：","slug":"一、高并发常见指标","link":"#一、高并发常见指标","children":[{"level":3,"title":"1. QPS（Queries Per Second）—— 每秒查询数","slug":"_1-qps-queries-per-second-——-每秒查询数","link":"#_1-qps-queries-per-second-——-每秒查询数","children":[]},{"level":3,"title":"2. TPS（Transactions Per Second）—— 每秒事务数","slug":"_2-tps-transactions-per-second-——-每秒事务数","link":"#_2-tps-transactions-per-second-——-每秒事务数","children":[]},{"level":3,"title":"3. RT（Response Time）—— 响应时间","slug":"_3-rt-response-time-——-响应时间","link":"#_3-rt-response-time-——-响应时间","children":[]},{"level":3,"title":"4. 并发数","slug":"_4-并发数","link":"#_4-并发数","children":[]},{"level":3,"title":"5. 吞吐量（Throughput）","slug":"_5-吞吐量-throughput","link":"#_5-吞吐量-throughput","children":[]}]},{"level":2,"title":"二、常用的组件 QPS","slug":"二、常用的组件-qps","link":"#二、常用的组件-qps","children":[{"level":3,"title":"1. Tomcat 与 Undertow","slug":"_1-tomcat-与-undertow","link":"#_1-tomcat-与-undertow","children":[]},{"level":3,"title":"2. MySQL","slug":"_2-mysql","link":"#_2-mysql","children":[]},{"level":3,"title":"3. Redis","slug":"_3-redis","link":"#_3-redis","children":[]},{"level":3,"title":"4. 消息队列（MQ）","slug":"_4-消息队列-mq","link":"#_4-消息队列-mq","children":[]}]}],"git":{"updatedTime":1745686292000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":7,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hello0709"}]},"filePathRelative":"high-concurrency/3_Indicator.md"}');export{h as comp,c as data};
